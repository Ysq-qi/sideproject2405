# 定義工作流程的名稱，方便在 GitHub Actions 中辨識
name: Backend Deploy to Firebase Functions

# 定義觸發條件：每當推送到 main 分支時觸發這個工作流程
on:
  push:
    branches:
      - main  # 僅在推送至 main 分支時觸發

jobs:
  deploy:  # 定義一個名為 "deploy" 的工作任務
    runs-on: ubuntu-latest  # 使用最新版本的 Ubuntu 作為執行環境

    steps:  # 定義這個工作任務中的每一步

      # 第一步：檢出代碼（Checkout）
      - name: Checkout code
        uses: actions/checkout@v3  # 使用官方的 checkout action，將代碼檢出到工作目錄中

      # 第二步：設置 Node.js 環境
      - name: Set up Node.js  # 命名此步驟
        uses: actions/setup-node@v3  # 使用 GitHub 的官方 Node.js 設置工具
        with:
          node-version: 20  # 指定使用的 Node.js 版本

      # 第三步：安裝 Firebase CLI（命令列工具）
      - name: Install Firebase CLI
        run: npm install -g firebase-tools  # 全域安裝 Firebase CLI，以便在後續步驟中使用

      # 第四步：使用 GitHub Secrets 進行 Firebase 認證
      - name: Authenticate with Firebase
        # 環境變數，將服務帳戶 JSON 存放在一個名為 serviceAccount.json 的檔案中
        env:
          GOOGLE_APPLICATION_CREDENTIALS: serviceAccount.json
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > serviceAccount.json  # 將 GitHub Secret 寫入 serviceAccount.json
          
      # 第五步：安裝後端依賴項
      - name: Install dependencies
        run: |
          cd functions  # 進入 functions 資料夾
          npm install   # 安裝 functions 資料夾中的所有 npm 依賴項

      # 第六步：部署至 Firebase Functions
      - name: Deploy to Firebase
        run: |
          cd functions  # 確保在 functions 目錄中
          firebase deploy --only functions  # 直接使用服務帳戶進行部署

      # 第七步：清理 serviceAccount.json（避免敏感資料洩露）
      - name: Cleanup
        run: rm serviceAccount.json  # 刪除 serviceAccount.json，防止不必要的風險